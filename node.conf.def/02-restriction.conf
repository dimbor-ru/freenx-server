#########################################################################
# Restriction directives
#########################################################################

# The base display number from which sessions are started.
#@ type: int
#@ check: 2000 error
DISPLAY_BASE=2000

# The maximum number of contemporary sessions that can be run on FreeNX
#@ type: int error
SESSION_LIMIT=200

# The maximum number of contemporary sessions that a single user can run
# on FreeNX.
#@ type: int
#@ check: 1 SESSION_LIMIT
SESSION_USER_LIMIT=20

# The number of displays reserved for sessions, it has to be greater or equal
# to the maximum number of contemporary sessions that a server can run.
#@ type: int
#@ check: SESSION_LIMIT
DISPLAY_LIMIT=200


# User for which sessions should be persistent. Either the keyword "all" or a
# comma-separated list of usernames or groups in the @groupname syntax.
#@ type: string
ENABLE_PERSISTENT_SESSION="all"

# Users and groups for whom persistent sessions should be disabled.
# Especially useful if ENABLE_PERSISTENT_SESSION="all"
#@ type: string
DISABLE_PERSISTENT_SESSION=""

# This enables the mirroring of running sessions via VNC feature.
# Session is marked as resumable and type is vnc-mirrored.
#@ type: bool
ENABLE_MIRROR_VIA_VNC=1

# This enables the sharing of :0 via VNC feature.
# Session is marked as resumable and type is vnc-local.
# Note: You need to have the rights to access the display
#       else it does not work.
#
#@ type: bool
ENABLE_DESKTOP_SHARING=1

#
# General shadowing / mirroring notes:
#
# By default shadowing is only allowed for the same user.
#
# If nxserver finds nxshadowacl binary, it asks it, for which users
# the permission is granted.
# nxshadowacl <user>
# Exit code:
#
# 0 -> Save cookie in session file for other users
# 1 -> Do not save cookie
#
# Check if user is allowed to be shadowed by admin user.
# nxshadowacl <user> <admin>
#
# Exit code:
#
# 0 -> Yes, allow shadowing and add to list
# 1 -> No, don't allow shadowing

#
# When using NX 3.0 shadowing, this enables asking the user whether
# he authorizes another user to shadow his session
#
# 0: No authorization request will be presented,
#    and the session will be shadowed as if the user had approved.
# 1: (default) Ask for authorization
#
#@ type: bool
ENABLE_SESSION_SHADOWING_AUTHORIZATION=1

# Allow session shadowing in interactive mode:
#
# 1: The shadowing user can interact with the shadowed session.
#
# 0: The shadowed session is view-only. No interaction with the
#    shadowed session is possible.
#
#@ type: bool
ENABLE_INTERACTIVE_SESSION_SHADOWING=1

#
# Enable or disable clipboard:
#
# client:  The content copied on the client can be pasted inside the
#            NX session.
#
# server: The content copied inside the NX session can be pasted
#             on the client.
#
# both:    The copy&paste operations are allowed both between the
#             client and the NX session and vice-versa.
#
# none:   The copy&paste operations between the client and the NX
#            session are never allowed.
#
#@ type: string
#@ check: list: %server, both, none% error
ENABLE_CLIPBOARD="both"


#
# Enable or disable the pulldown dialog, which provides a graphical
# way to suspend or terminate the rootless session:
#
# 1: Enabled. The pulldown menu is shown when the mouse pointer
#     moves near the middle of the top boundary of a window and
#     allows the user to suspend or terminate the session by means
#     of an icon-click.
#
# 0: Disabled. The ctrl+alt+T key combination has to be issued
#     to get the dialog for suspending or terminating the session.
#
#@ type: bool
ENABLE_PULLDOWN_MENU=1

# If you set ENABLE_ADVANCED_SESSION_CONTROL=1 you can start a new application
# in an already
# running rootless session by using "add <rest of name>" as session name.
#
# Note: The client will return a message on that.
#
#@ type: bool
ENABLE_ADVANCED_SESSION_CONTROL=0

# If you set ENABLE_SHOW_RUNNING_SESSIONS=0 then nxserver will only show
# suspended sessions and you will not be able to resume or terminate a running
# session.
# dimbor: for autoreconnect must set to 0
#
#@ type: bool
ENABLE_SHOW_RUNNING_SESSIONS=0

# If value of this option not empty (valid dir) "run-acls" system is switch on:
# On session start (node_find_application) called script named nxacl.apps. Script parse
# ACLS-files in NX_ACL_DIR and search user/group permissions for given cmdstr.
# ACLS filenames are usernames, groupnames and "all". Permissions search order:
# user - group - all. See $NX_ETC_DIR/acls/README for detail
# Example: NX_ACL_DIR="/etc/nxserver/acls"
#@ type: string
NX_ACL_DIR=""
